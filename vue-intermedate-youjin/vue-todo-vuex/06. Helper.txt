# Helper
 - vuex의 네가지 기술요소를 더 편하게 코딩하기 위함
    state -> mapState
    getters -> mapGetters
    mutations -> mapMutations
    actions -> mapActions

# Helper 사용법

 //App.vue

 //helper 로딩import
 import { mapState } from 'vuex'
 import { mapGetters } from 'vuex'
 import { mapMutations } from 'vuex'
 import { mapActions } from 'vuex'

 export default {
     computed() { ...mapState(['num']), ...mapGetters(['countedNum']) },
     methods() { ...mapMutations(['clickBtn']), ...mapActions(['aysncClickBtn']) }
 }
 
 => '' 안에 있는 거는 vuex 에서 각각 다 선언되어 있는 것들
    ...mapState(['num']) => this.$store.state.num 과 동일

 => helper는 정의할때 인자를 명시하지 않아도 호출시 인자를 전달하면 암묵적으로 전달함.
    ex)
    //app.vue > template
    <span class="removeBtn" v-on:click="removeTodo({todoItem,index})"></span>

    //app.vue
    ...mapMutations({
      removeTodo:'removeOneItem' // todoItem, index 가 암묵적으로 인자로 넘어감
    })

    **** 다만 인자의 순서, 갯수는 맞추어 주어야 함


* ... 은 오타가 아님
 - ES6의 Object Spread Operator (산개연산자. 뿌리는 연산자)
 - 무엇을 뿌려?
    - ... 안에 여러개의 속성이 있어. 그걸 다 뿌려서 집어 넣어
ECMAScript 2015(ES6) > 06.Spread 참고.


# mapState
 - Vuex에 선언한 state 속성을 뷰 컴포넌트에 더 쉽게 연결

 // App.vue
 import { mapState } from 'vuex'

 computed() {
     ...mapState(['num'])
     // num() { return this.$store.state.num; } // 과 동일
 }

 //store.js
 state : {
     num:10
 }

 //App.vue > template
 <!-- <p> {{ this.$store.state.num }} </p> -->
 <p> {{ this.num }} </p>


# mapGetters
 - Vuex에 선언한 getters 속성을 뷰 컴포넌트에 더 쉽게 연결

 // App.vue
 import { mapGetters } from 'vuex'

 computed() {
     ...mapGetters(['reverseMessage'])
 }

 //store.js
 getters : {
     reverseMessage(state) {
         return state.msg.split('').reverse().join('');
     }
 }

 //App.vue > template
 <!-- <p> {{ this.$store.getters.reverseMessage }} </p> -->
 <p> {{ this.reverseMessage }} </p>


* Spread Operator 사용하는 이유
 - 각각의 컴포넌트에 존재하는 computed 속성이 있음
 - 기존에 computed 내에 속성이 존재하는 상태에서 helper 를 쓰고 싶으면 무조건 Spread Operator 사용해야 함,
 - 자세한 이유는 ECMAScript 2015(ES6) > 06.Spread 참고.


# mapMutations
 - Vuex에 선언한 mutations 속성을 뷰 컴포넌트에 더 쉽게 연결

 // App.vue
 import { mapMutations } from 'vuex'

 methods: {
     ...mapMutations(['clickBtn']),
     authLogin() {},
     displayTable() ()
 }

 //store.js
 mutations : {
     clickBtn(state) {
         alert(state.msg);
     }
 }

 //App.vue > template
 <button @click="clickBtn"> popup message </button>

=> 




# mapActions

 import { mapActions } from 'vuex'

 위와 같음..


# Helper 의 유연한 문법
 - Vuex에 선언한 속성을 그대로 컴포넌트에 연결하는 문법
 ...mapMutations([ //array
     'clickBtn',    // 'clickBtn':clickBtn
     'addNumber'    // 인자 parameter
 ])

 - Vuex에 선언한 속을 컴포넌트의 특정 메서드에다가 연결하는 문법
...mapMutations({ //object
     popupMsg:'clickBtn' // 컴포넌트 메서드 명:store의 mutations 명
 })


 #  Helper 함수의 간결함
 store > demoStore.js 참고
 components > Demo.vue 참고


 # vuex 를 적용하기 전과 후 차이점
 - 적용전
 app.vue(root) 에서 전체적인 로직 관리

 - 적용후
 app.vue 에서는 root 에 하위 컴포넌트를 등록하는 역할만함
 로직 관리는 store에서 함
 event, props 속성들이 다 사라짐. 

 그런데 store에 너무 로직이 많아져 너무 보기 힘듦, 관리 어려움.
 다음시가에는 import 등으로 인해 연관된 애들끼리 파일을 찢어 모듈 화 할거임.

 => es6 에 modules 를 이용해서 전체적으로 구조화 할거임.
