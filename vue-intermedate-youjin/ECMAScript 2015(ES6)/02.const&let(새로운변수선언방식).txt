
# var
:  variable 의 약자로 es5 js에서 변수를 선언했던 방식
장점 : 유연함
단점 : 애매모호함
        -> 선언을 했는데 다시 선언할 수 있음.
        -> 값을 아무거나 아무렇지 않게 다시 선언 할 수 있음.
        -> Hoisting(호이스팅) : JS로직에 상관 없이 변수가 언제는 들어가고 언제는 안들어가

-> 이런 애매모호함에 생기는 오류들을 미연에 방지 하겠다.
-> const,let

# ES5의 두가지 특징
 - 변수의 Scope(유효범위)
    - {} 에 상관 없이 scope 설정됨
    - 반복문 등 제어문은 범위 제한 되지 않음
        ex) for 문 안에서 변수를 선언한 후 for문 밖에서 그 변수를 사용 할 수
    - function scope (함수의 블록안으로 범위 제한)
 - Hoisting(호이스팅)
    - hoist : 끌어올려진다.
    - 함수와 변수가 가장 상단에 있는 것처럼 인식됨.
    - js 해석기는 코드의 라인 순서에 상관 없이 함수 선언식과 변수를 위해 메모리를 먼저 확보함
        ex) // 함수 선언식, function statement
            function sum() {
                return 10 + 20;
            }
            // 함수 표현식, function expression
            var sum = function () {
                return 10 + 20;
            }
    - 함수 선언식, 변수 메모리 할당 -> 값 할당,연산
    - 따라서, 같은 이름의 함수를 두번 선언했다면 제일 마지막에 선언된 함수가 호출됨



# ES6 변경사항
 - 블록단위({})로 변수 범위 제한
    - 반복,제어문 안에서 선언된 변수는 사용 할 수 없음.


# const
 - 상수. 한번 선언 값은 변경 할 수 없음(string, int 등..)
 - object, array 내 값은 변경 가능(call by reference)

# let
 - 한번 선언한 값에 대해 다시 선언 할수 없음
 - 정의는 가능


정리 : 아래와 같은 코드는 됨.

function f() {
    {
        let x;
        {
            const x = "sneaky";
            x = "foo"; //error
        }
        x = "bar"; // ok
        let x = "inner"; //error
    }
}