- Reactivity
 : Vue.js 가 추구하는 핵심 기술, 사상. 
   데이터에 대한 변화를 vue에서 감지해서 화면반영
   화면 조작에 대한 api, 속성 제공
   => application 개발에 대한 많은 부분을 library에서 가져가서 개발을 쉽게 하겠다.

- 인스턴스
 : Vue 개발시 필수로 생성해야 하는 단위. 인스턴스안에 속성을 추가해 나가며 우리는 앱을 개발할거야

- 컴포넌트
 : 화면 영역을 구분해서 개발하는 방식.
   현재 프론트앤드 프레임웤에서 가장 중요한 개념
   재사용성(코드의 반복을 줄이는 것)
   
- 컴포넌트 통신
   : 컴포넌트로 개발시 데이터의 흐름을 제한. 
     여러명의 개발자가 개발을 하더라도 서로 데이터의 흐름을 이해할 수 있다.
    - props
      : 상위 -> 하위 로 데이터 내림
    - evnet emit
      : 하위 -> 상위로 데이터 올림

- HTTP 통신 라이브러리(axios)
   : axios 활용이 궁금하면 깃헙에서 api 나 기타 가이드 참고

- 템플릿 문법
   : 화면을 조작하기 위한 vue의 문법
    - 데이터 바인딩
       : Reactivity 와 비슷한 개념. 데이터 변화에 따라 화면에 실제로 엮어 내는 부분.
    - 뷰 디렉티브
       : 화면 조작을 위해 vue에서 추가로 제공하는 문법(v-)

- Vue CLI
   : 프로젝트 생성시 명령어를 통해 생성

- 싱글 파일 컴포넌트
   : .vue/ Vue 에서 제공하는 html/javascript/css가 한번에 있음.
     실제로 어떻게 돌아가는지는 web-pack의 공식 문서 참고
      web-pack의 기능중 vue-loader가 싱글파일컴포넌트 파일들을 찢어서
      브라우저가 이해할 수 있는 형태로 바꿔줌
      

